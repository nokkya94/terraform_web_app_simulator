name: Terraform CI

permissions:
  contents: read
  issues: write
  pull-requests: write
  # If you later want to upload SARIF to GitHub code scanning UI:
  # security-events: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  security:
    name: "SCA & SAST"
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # optional: full history if you ever want to scan git history

      - name: Prep results dir
        run: mkdir -p reports/status

      # ---------------- tfsec ----------------
      - name: Install tfsec
        run: |
          wget https://github.com/aquasecurity/tfsec/releases/latest/download/tfsec-linux-amd64
          chmod +x tfsec-linux-amd64
          sudo mv tfsec-linux-amd64 /usr/local/bin/tfsec

      - name: Run tfsec (JSON + SARIF)
        id: tfsec
        continue-on-error: true
        run: |
          tfsec . --format json --out reports/tfsec.json
          TFSEC_EXIT=$?
          # optional SARIF for code scanning / review tools
          tfsec . --format sarif --out reports/tfsec.sarif || true
          echo $TFSEC_EXIT > reports/status/tfsec.exit

      - name: Upload tfsec reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tfsec-reports-${{ github.run_id }}-${{ github.run_attempt }}
          path: reports/tfsec.*

      # ---------------- Checkov ----------------
      - name: Install Checkov
        run: pip install --upgrade checkov==2.2.200

      - name: Run Checkov (SARIF)
        id: checkov
        continue-on-error: true
        run: |
          checkov -c .checkov.yaml -d . -o sarif --output-file-path reports/checkov.sarif
          echo $? > reports/status/checkov.exit

      - name: Upload Checkov reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-reports-${{ github.run_id }}-${{ github.run_attempt }}
          path: reports/checkov.sarif

      # ---------------- Trivy ----------------
      - name: Install Trivy
        run: |
          LATEST=$(curl -s https://api.github.com/repos/aquasecurity/trivy/releases/latest | grep '"tag_name":' | head -n 1 | cut -d '"' -f4)
          VERSION=${LATEST#v}
          wget https://github.com/aquasecurity/trivy/releases/download/${LATEST}/trivy_${VERSION}_Linux-64bit.tar.gz
          tar -xzf trivy_${VERSION}_Linux-64bit.tar.gz
          sudo mv trivy /usr/local/bin/

      - name: Run Trivy filesystem scan (SARIF)
        id: trivy
        continue-on-error: true
        run: |
          # --exit-code 1 if vulns found; tune severities as desired
          trivy fs --scanners vuln,secret,config --format sarif -o reports/trivy.sarif --exit-code 1 .
          echo $? > reports/status/trivy.exit

      - name: Upload Trivy reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-reports-${{ github.run_id }}-${{ github.run_attempt }}
          path: reports/trivy.sarif

      # ---------------- Semgrep ----------------
      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep (JSON)
        id: semgrep
        continue-on-error: true
        run: |
          semgrep --config=auto . --json -o reports/semgrep.json
          echo $? > reports/status/semgrep.exit

      - name: Upload Semgrep reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-reports-${{ github.run_id }}-${{ github.run_attempt }}
          path: reports/semgrep.json

      # ---------------- Gitleaks ----------------
      - name: Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.24.3/gitleaks_8.24.3_linux_x64.tar.gz
          tar -xzf gitleaks_8.24.3_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/

      - name: Run Gitleaks (Secret Detection)
        id: gitleaks
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gitleaks detect --source=. --report-path=reports/gitleaks-report.json --redact
          echo $? > reports/status/gitleaks.exit

      - name: Upload Gitleaks report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report-${{ github.run_id }}-${{ github.run_attempt }}
          path: reports/gitleaks-report.json

      # ---------------- Gate: fail if any scanner failed ----------------
      - name: Gate scanners (fail if any non-zero exit)
        if: always()
        run: |
          rc=0
          for f in reports/status/*.exit; do
            name=$(basename "$f" .exit)
            code=$(cat "$f" || echo 0)
            echo "$name -> exit $code"
            if [ "$code" -ne 0 ]; then rc=1; fi
          done
          if [ $rc -ne 0 ]; then
            echo "At least one scanner reported findings. See uploaded artifacts."
            exit 1
          fi

  terraform:
    name: "Terraform Workflow"
    runs-on: ubuntu-latest
    needs: security
    environment: dev

    outputs:
      alb_url: ${{ steps.get_alb.outputs.alb_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.5

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Create SSH public key files
        run: |
          mkdir -p keys
          echo "${{ secrets.WEB_INSTANCE_KEY_PUB }}" > keys/web_instance_key.pub

      - name: Terraform Init
        run: terraform init
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_db_username: ${{ vars.DB_USERNAME }}
          TF_VAR_environment: ${{ vars.ENVIRONMENT }}
          TF_VAR_s3_bucket_with_alb_logs: ${{ vars.S3_BUCKET_WITH_ALB_LOGS }}
          TF_VAR_webapp_instance_key_name: ${{ vars.WEBAPP_INSTANCE_KEY_NAME }}
          TF_VAR_iam_role_name: ${{ secrets.IAM_ROLE_NAME }}
          TF_VAR_iam_user_name: ${{ secrets.IAM_USER_NAME }}
          TF_VAR_backend_state_bucket_name: ${{ vars.BACKEND_STATE_BUCKET_NAME }}
          TF_VAR_dynamodb_state_table_name: ${{ vars.DYNAMODB_STATE_TABLE_NAME }}

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Validate
        run: terraform validate

      - name: Install tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          tflint --init

      - name: Run tflint
        run: tflint --disable-rule=terraform_documented_variables

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_db_username: ${{ vars.DB_USERNAME }}
          TF_VAR_environment: ${{ vars.ENVIRONMENT }}
          TF_VAR_s3_bucket_with_alb_logs: ${{ vars.S3_BUCKET_WITH_ALB_LOGS }}
          TF_VAR_webapp_instance_key_name: ${{ vars.WEBAPP_INSTANCE_KEY_NAME }}
          TF_VAR_iam_role_name: ${{ secrets.IAM_ROLE_NAME }}
          TF_VAR_iam_user_name: ${{ secrets.IAM_USER_NAME }}
          TF_VAR_backend_state_bucket_name: ${{ vars.BACKEND_STATE_BUCKET_NAME }}
          TF_VAR_dynamodb_state_table_name: ${{ vars.DYNAMODB_STATE_TABLE_NAME }}

      - name: Terraform Apply (main branch only)
        if: github.ref == 'refs/heads/main'
        run: terraform apply -auto-approve tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
          TF_VAR_db_username: ${{ vars.DB_USERNAME }}
          TF_VAR_environment: ${{ vars.ENVIRONMENT }}
          TF_VAR_s3_bucket_with_alb_logs: ${{ vars.S3_BUCKET_WITH_ALB_LOGS }}
          TF_VAR_webapp_instance_key_name: ${{ vars.WEBAPP_INSTANCE_KEY_NAME }}
          TF_VAR_iam_role_name: ${{ secrets.IAM_ROLE_NAME }}
          TF_VAR_iam_user_name: ${{ secrets.IAM_USER_NAME }}
          TF_VAR_backend_state_bucket_name: ${{ vars.BACKEND_STATE_BUCKET_NAME }}
          TF_VAR_dynamodb_state_table_name: ${{ vars.DYNAMODB_STATE_TABLE_NAME }}

      - name: Get ALB URL from Terraform output (main branch only)
        if: github.ref == 'refs/heads/main'
        id: get_alb
        run: echo "alb_url=$(terraform output -raw alb_dns_name)" >> $GITHUB_OUTPUT

      - name: Wait for ALB to be ready (main branch only)
        if: github.ref == 'refs/heads/main'
        run: |
          for i in {1..30}; do
            if curl -sSf "http://${{ steps.get_alb.outputs.alb_url }}" ; then
              echo "ALB is ready!"
              exit 0
            else
              echo "Waiting for ALB... ($i/30)"
              sleep 20
            fi
          done
          echo "ALB did not become ready in time."
          exit 1

  dast:
    runs-on: ubuntu-latest
    needs: terraform
    if: github.ref == 'refs/heads/main'
    environment: dev

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Wait for ALB to be ready
        run: |
          echo "Waiting for ALB: http://${{ needs.terraform.outputs.alb_url }}"
          for i in {1..30}; do
            if curl -sSf "http://${{ needs.terraform.outputs.alb_url }}" > /dev/null; then
              echo "ALB is ready!"
              exit 0
            else
              echo "Waiting for ALB... ($i/30)"
              sleep 20
            fi
          done
          echo "ALB did not become ready in time."
          exit 1

      - name: Run OWASP ZAP DAST
        id: zap
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: "http://${{ needs.terraform.outputs.alb_url }}"
          fail_action: false
          allow_issue_writing: true
          upload_artifact: false

      - name: Upload ZAP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-${{ github.run_id }}-${{ github.run_attempt }}
          path: |
            zap-report/*
            owasp-zap-report.html
          if-no-files-found: warn
          retention-days: 14

      - name: Add ZAP Report to Job Summary
        if: always()
        run: |
          echo "## OWASP ZAP DAST Report" >> $GITHUB_STEP_SUMMARY
          if [ -f owasp-zap-report.html ]; then
            echo "<details><summary>Click to view ZAP Report (first 200 lines)</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo '```html' >> $GITHUB_STEP_SUMMARY
            head -n 200 owasp-zap-report.html >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          else
            echo "_No ZAP HTML report was generated._" >> $GITHUB_STEP_SUMMARY
          fi
